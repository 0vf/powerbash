#!/usr/bin/env bash
# Bash theme that looks like powerlevel10k
# function to get git branch for ps1 (made as an alternative to git-prompt.sh)
__pbash_installation_dir=$(dirname "${BASH_SOURCE[0]}")
[ -d "${__pbash_installation_dir}/modules" ] && for file in "${__pbash_installation_dir}/modules"/*; do [ -f "$file" ] && source "$file"; done
[ -d "${__pbash_installation_dir}/commands" ] && for file in "${__pbash_installation_dir}/commands"/*; do [ -f "$file" ] && source "$file"; done
__pbash_command_prefix="$(fc2 6)pbash $(fc2 255)❯" 
__pbash_current_version="2.1.0"
if [[ "$__pbash_shorten_directory" != "false" ]]; then
	PROMPT_DIRTRIM=4
fi
# Distro checker (for the distro's logo in the prompt)
. /etc/os-release 2>/dev/null || NAME=$(uname)
case "$NAME" in
	"Arch Linux") export distro_logo="";;
	"Artix Linux") export distro_logo="";;
	"Ubuntu") export distro_logo="";;
	"Manjaro Linux") export distro_logo="";;
	"Alpine Linux") export distro_logo="";;
	"Debian GNU/Linux") export distro_logo="";;
	"Devuan GNU/Linux") export distro_logo="";;
	"AlmaLinux") export distro_logo="";;
	"Fedora") export distro_logo="";;
	"Gentoo") export distro_logo="";;
	"CentOS Linux") export distro_logo="";;
	"elementary OS") export distro_logo="";;
	"Rocky Linux") export distro_logo="";;
	"Kali GNU/Linux") export distro_logo="";;
	"Void") export distro_logo="";;
	"Pop!_OS") export distro_logo="";;
	"FreeBSD") export distro_logo="";;
	"OpenBSD") export distro_logo="";;
	"Darwin") export distro_logo="";;
	*) export distro_logo="";;
esac

# Command handler
pbash() {
	case $1 in
		help)
			# List files in the commands/ directory without extensions
			command_files=$(ls ${__pbash_installation_dir}/commands/*.sh 2>/dev/null)
			command_names=""
			for file in $command_files; do
				command_name=$(basename "$file" .sh)
				command_names+=" $command_name"
			done
			printf "${__pbash_command_prefix} commands:$(fc2 4)$command_names\n\e[m"

			if [[ -n $2 ]]; then
				command_help_variable="__pbash_commands_${2}_help"
				if declare -p "$command_help_variable" &>/dev/null; then
					printf "\n${__pbash_command_prefix} $2 help:\n"
					printf "%s\e[m" "${!command_help_variable}"
				else
					printf "\n${__pbash_command_prefix} $(fc2 1)no help available for '$2'\n\e[m"
				fi
			else
				printf "\n${__pbash_command_prefix} type $(fc2 4)pbash help [command] $(fc2 255)to get more help about a command\n\e[m"
			fi
			;;
		*)
			# Check if the command file exists
			command_file="${__pbash_installation_dir}/commands/$1.sh"
			if [ -f "$command_file" ]; then
				# Remove the file extension
				command_name=$(basename "$command_file" .sh)
				# Execute the command function
				"pbash_$command_name" ${@:2}
			else
				printf "${__pbash_command_prefix} $(fc2 1)invalid command, try pbash help\n\e[m"
			fi
			;;
	esac
}
source $__pbash_configuration_path